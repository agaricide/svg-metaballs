{"version":3,"sources":["github-badge.tsx","metaball/utils/math.ts","metaball/metaball.ts","metaball/utils/dom.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["GithubBadge","_ref","className","react_default","a","createElement","href","alt","src","getDist","_ref2","_ref3","Object","slicedToArray","x1","y1","_ref4","x2","y2","Math","pow","getVector","_ref9","d","_ref10","x","y","cos","sin","HALF_PI","PI","makeMetaballGoo","r1","r2","center1","center2","handleSize","arguments","length","undefined","v","u1","u2","abs","acos","angleOffset","_ref5","_ref6","_ref7","_ref8","atan2","getDiffVectorAngle","maxSpread","angle1","angle2","angle3","angle4","p1","p2","p3","p4","points","totalRadius","d2","min","hl1","hl2","escaped","r","h1","h2","join","toGooPath","toSVGCoord","svg","el","point","createSVGPoint","elMatrix","getScreenCTM","inverse","translated","matrixTransform","STARTING_POINT","App","_useState","useState","_useState2","coord","setCoord","_useState3","_useState4","isMoving","setIsMoving","svgEl","useRef","gEl","handleMouseMove","useCallback","event","current","clientX","clientY","preventDefault","handleTouchMove","touches","pageX","pageY","handleStartMoving","handleStopMoving","grabbingClassName","react","github_badge","ref","viewBox","onTouchMove","onTouchStart","onTouchEnd","onMouseMove","onMouseDown","onMouseUp","renderprops","config","molasses","from","to","animation","cx","cy","makeGoo","Boolean","window","location","hostname","match","document","title","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.37722ac3.chunk.js","sourcesContent":["import React from \"react\";\n\nconst SRC =\n  \"https://github.com/agaricide/svg-metaballs/blob/develop/react-svg-metaball/src/App.tsx\";\n\ninterface Props {\n  className: string;\n}\n\nconst GithubBadge: React.FC<Props> = ({ className }) => {\n  return (\n    <a className={className} href={SRC}>\n      <img\n        alt=\"GitHub Logomark\"\n        src=\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\"\n      />\n      View on Github\n    </a>\n  );\n};\n\nexport default GithubBadge;\n","import { Point } from \"../types/Point\";\n\n/**\n * Get the distance between 2 points\n */\nconst getDist = ([x1, y1]: Point, [x2, y2]: Point) =>\n  ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5;\n\n/**\n * Get the radian angle between the difference vector of p1 and p2 and the x-axis\n */\nconst getDiffVectorAngle = ([x1, y1]: Point, [x2, y2]: Point) =>\n  Math.atan2(y1 - y2, x1 - x2);\n\n/**\n * Turn a starting point, an angle in radians, and a distance into a 2D Vector (aka a point)\n * @param point a starting point\n * @param a an angle in radians\n * @param d a distance along the ray from the starting point\n */\nconst getVector = ([x, y]: Point, a: number, d: number): Point => [\n  x + d * Math.cos(a),\n  y + d * Math.sin(a)\n];\n\nexport { getDist, getDiffVectorAngle, getVector };\n","import { getDiffVectorAngle, getDist, getVector } from \"./utils/math\";\nimport { Point } from \"./types/Point\";\nconst HALF_PI = Math.PI / 2;\n\n/**\n * @param points trapazoid points\n * @param handles handle points\n * @param escaped\n * @param r radius of goo'ed circle\n * @returns a svg \"d\" attribute path string\n */\nconst toGooPath = (\n  [p1, p2, p3, p4]: Point[],\n  [h1, h2, h3, h4]: Point[],\n  escaped: boolean,\n  r: number\n) =>\n  [\n    \"M\",\n    p1,\n    \"C\",\n    h1,\n    h3,\n    p3,\n    \"A\",\n    r,\n    r,\n    0,\n    escaped ? 1 : 0,\n    0,\n    p4,\n    \"C\",\n    h4,\n    h2,\n    p2\n  ].join(\" \");\n\n/**\n * Ported from Hiroyuki Sato's original metaball script\n * @param r1 radius 1\n * @param r2 radius 1\n * @param center1 circle center 1\n * @param center2 circle center 2\n * @param handleSize angle severity coefficient\n * @param v spread coefficient\n * @see https://varun.ca/metaballs/\n * @returns a svg \"d\" attribute path string\n */\nconst makeMetaballGoo = (\n  r1: number,\n  r2: number,\n  center1: Point,\n  center2: Point,\n  handleSize = 2.4,\n  v = 0.5\n) => {\n  const d = getDist(center1, center2);\n  const maxDist = r1 + r2 * 2.5;\n  let u1 = 0;\n  let u2 = 0;\n\n  if (r1 <= 0 || r2 <= 0) {\n    return \"\";\n  }\n\n  // If circles are within distance\n  if (d > maxDist) {\n    return \"\";\n  }\n\n  // If one circle is not within the bounds of the other\n  if (d <= Math.abs(r1 - r2)) {\n    return \"\";\n  }\n\n  // If circles are touching\n  if (d < r1 + r2) {\n    // Expands spread as circles get closer\n    // Hiroyuki Sato magic\n    u1 = Math.acos((r1 * r1 + d * d - r2 * r2) / (2 * r1 * d));\n    u2 = Math.acos((r2 * r2 + d * d - r1 * r1) / (2 * r2 * d));\n  }\n\n  // Angle between the vector connecting center1 & center2 and x-axis\n  // Used as a correcting offset for our radian-based calculations\n  const angleOffset = getDiffVectorAngle(center2, center1);\n\n  // Max angle of spread is used to find the tangents we use to make the trapazoid\n  // @see https://varun.ca/metaballs/#building-the-metaball\n  // @see http://www.mathopenref.com/consttangentsext.html\n  const maxSpread = Math.acos((r1 - r2) / d);\n\n  // Find the angles for trapazoid via unit cirlce math and Sato offsets\n  // Angles are measured clockwise\n  const angle1 = angleOffset + u1 + (maxSpread - u1) * v;\n  const angle2 = angleOffset - u1 - (maxSpread - u1) * v;\n  const angle3 = angleOffset + Math.PI - u2 - (Math.PI - u2 - maxSpread) * v;\n  const angle4 = angleOffset - Math.PI + u2 + (Math.PI - u2 - maxSpread) * v;\n\n  // Convert angles to cartesian points of trapazoid corners\n  const p1 = getVector(center1, angle1, r1);\n  const p2 = getVector(center1, angle2, r1);\n  const p3 = getVector(center2, angle3, r2);\n  const p4 = getVector(center2, angle4, r2);\n  const points = [p1, p2, p3, p4];\n\n  // Handle length = the distance between both ends of the curve\n  const totalRadius = r1 + r2;\n  // Take into account when balls are overlapping\n  const d2Base = Math.min(v * handleSize, getDist(p1, p3) / totalRadius);\n  const d2 = d2Base * Math.min(1, (d * 2) / (r1 + r2));\n\n  // Handle length\n  const hl1 = r1 * d2;\n  const hl2 = r2 * d2;\n\n  // Calculate handles\n  // Protrude 180* from respective point p with distance hl\n  const h1 = getVector(p1, angle1 - HALF_PI, hl1);\n  const h2 = getVector(p2, angle2 + HALF_PI, hl1);\n  const h3 = getVector(p3, angle3 + HALF_PI, hl2);\n  const h4 = getVector(p4, angle4 - HALF_PI, hl2);\n  const handles = [h1, h2, h3, h4];\n\n  return toGooPath(points, handles, d > r1, r2);\n};\n\nexport default makeMetaballGoo;\n","import { Point } from \"../types/Point\";\n\n/**\n * Translate a MouseEvent \"mousemove\" to a coordinate in SVG space\n * @param ev a MouseEvent \"mousemove\" event\n * @param svg the parent svg container\n * @param el the svg object we are translating (fixes bugs caused by e.g. transform=\"scale(2)\")\n * @see https://www.sitepoint.com/how-to-translate-from-dom-to-svg-coordinates-and-back-again/\n */\nconst toSVGCoord = (\n  [x, y]: Point,\n  svg: SVGSVGElement,\n  el: SVGGElement\n): Point => {\n  if (!svg || !el) return [0, 0];\n  // Use parent container to create a point for calculating\n  const point = svg.createSVGPoint();\n  point.x = x\n  point.y = y;\n  // Use target object's matrix so calculations are accurate\n  const elMatrix = (<DOMMatrix>el.getScreenCTM()).inverse();\n  const translated = point.matrixTransform(elMatrix);\n  return [translated.x, translated.y];\n};\n\nexport { toSVGCoord };\n","import GithubBadge from \"./github-badge\";\nimport makeGoo from \"./metaball/metaball\";\nimport React, { Fragment, useRef, useState, useCallback } from \"react\";\nimport { config, Spring } from \"react-spring/renderprops\";\nimport { Point } from \"./metaball/types/Point\";\nimport { toSVGCoord } from \"./metaball/utils/dom\";\nimport \"./App.css\";\n\nconst STARTING_POINT: Point = [600, 350];\nconst R1 = 100;\nconst R2 = 75;\n\nconst App: React.FC = () => {\n  const [coord, setCoord] = useState(STARTING_POINT);\n  const [isMoving, setIsMoving] = useState(false);\n  const svgEl = useRef<SVGSVGElement>(null);\n  const gEl = useRef<SVGGElement>(null);\n\n  const handleMouseMove = useCallback(\n    (event: React.MouseEvent) => {\n      if (!svgEl.current || !gEl.current || !isMoving) return;\n      const x = event.clientX;\n      const y = event.clientY;\n      setCoord(toSVGCoord([x, y], svgEl.current, gEl.current));\n      event.preventDefault();\n    },\n    [isMoving]\n  );\n\n  const handleTouchMove = useCallback(\n    (event: React.TouchEvent) => {\n      if (!svgEl.current || !gEl.current || !isMoving) return;\n      const x = event.touches[0].pageX;\n      const y = event.touches[0].pageY;\n      setCoord(toSVGCoord([x, y], svgEl.current, gEl.current));\n      event.preventDefault();\n    },\n    [isMoving]\n  );\n\n  const handleStartMoving = useCallback(() => setIsMoving(true), [isMoving]);\n\n  const handleStopMoving = useCallback(() => setIsMoving(false), [isMoving]);\n\n  const grabbingClassName = isMoving ? \"grabbing\" : \"\";\n\n  return (\n    <Fragment>\n      <GithubBadge className={grabbingClassName} />\n      <svg\n        ref={svgEl}\n        viewBox=\"0 0 1200 1200\"\n        onTouchMove={handleTouchMove}\n        onTouchStart={handleStartMoving}\n        onTouchEnd={handleStopMoving}\n        onMouseMove={handleMouseMove}\n        onMouseDown={handleStartMoving}\n        onMouseUp={handleStopMoving}\n      >\n        <Spring\n          config={config.molasses}\n          from={{ coord: STARTING_POINT }}\n          to={{ coord: coord }}\n        >\n          {animation => (\n            <g ref={gEl} className={grabbingClassName}>\n              <circle cx={coord[0]} cy={coord[1]} r={R1} />\n              <circle cx={animation.coord[0]} cy={animation.coord[1]} r={R2} />\n              <path d={makeGoo(R1, R2, coord, animation.coord)} />\n            </g>\n          )}\n        </Spring>\n      </svg>\n    </Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\ndocument.title = \"React SVG Goo\"\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}