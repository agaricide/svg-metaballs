{"version":3,"sources":["metaball/utils/math.ts","metaball/metaball.ts","App.tsx","metaball/utils/dom.ts","serviceWorker.ts","index.tsx"],"names":["getDist","_ref","_ref2","_ref3","Object","slicedToArray","x1","y1","_ref4","x2","y2","Math","pow","getVector","_ref9","a","d","_ref10","x","y","cos","sin","HALF_PI","PI","makeMetaballGoo","r1","r2","center1","center2","handleSize","arguments","length","undefined","v","u1","u2","abs","acos","angleOffset","_ref5","_ref6","_ref7","_ref8","atan2","getDiffVectorAngle","maxSpread","angle1","angle2","angle3","angle4","p1","p2","p3","p4","points","totalRadius","d2","min","hl1","hl2","escaped","r","h1","h2","join","toGooPath","App","_useState","useState","_useState2","circleCoord","setCircleCoord","gEl","useRef","svgEl","_circleCoord","react_default","createElement","id","className","viewBox","ref","onMouseMove","event","current","ev","svg","el","point","createSVGPoint","clientX","clientY","elMatrix","getScreenCTM","inverse","translated","matrixTransform","toSVGCoord","renderprops","config","molasses","from","coords","to","props","strokeWidth","fill","stroke","cx","cy","makeGoo","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b1ecb50f.chunk.js","sourcesContent":["import { Point } from \"../types/Point\";\n\n/**\n * Get the distance between 2 points\n */\nconst getDist = ([x1, y1]: Point, [x2, y2]: Point) =>\n  ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5;\n\n/**\n * Get the radian angle between the difference vector of p1 and p2 and the x-axis\n */\nconst getDiffVectorAngle = ([x1, y1]: Point, [x2, y2]: Point) =>\n  Math.atan2(y1 - y2, x1 - x2);\n\n/**\n * Turn a starting point, an angle in radians, and a distance into a 2D Vector (aka a point)\n * @param point a starting point\n * @param a an angle in radians\n * @param d a distance along the ray from the starting point\n */\nconst getVector = ([x, y]: Point, a: number, d: number): Point => [\n  x + d * Math.cos(a),\n  y + d * Math.sin(a)\n];\n\nexport { getDist, getDiffVectorAngle, getVector };\n","import { getDiffVectorAngle, getDist, getVector } from \"./utils/math\";\nimport { Point } from \"./types/Point\";\nconst HALF_PI = Math.PI / 2;\n\n/**\n * @param points trapazoid points\n * @param handles handle points\n * @param escaped\n * @param r radius of goo'ed circle\n * @returns a svg \"d\" attribute path string\n */\nconst toGooPath = (\n  [p1, p2, p3, p4]: Point[],\n  [h1, h2, h3, h4]: Point[],\n  escaped: boolean,\n  r: number\n) =>\n  [\n    \"M\",\n    p1,\n    \"C\",\n    h1,\n    h3,\n    p3,\n    \"A\",\n    r,\n    r,\n    0,\n    escaped ? 1 : 0,\n    0,\n    p4,\n    \"C\",\n    h4,\n    h2,\n    p2\n  ].join(\" \");\n\n/**\n * Ported from Hiroyuki Sato's original metaball script\n * @param r1 radius 1\n * @param r2 radius 1\n * @param center1 circle center 1\n * @param center2 circle center 2\n * @param handleSize angle severity coefficient\n * @param v spread coefficient\n * @see https://varun.ca/metaballs/\n * @returns a svg \"d\" attribute path string\n */\nconst makeMetaballGoo = (\n  r1: number,\n  r2: number,\n  center1: Point,\n  center2: Point,\n  handleSize = 2.4,\n  v = 0.5\n) => {\n  const d = getDist(center1, center2);\n  const maxDist = r1 + r2 * 2.5;\n  let u1 = 0;\n  let u2 = 0;\n\n  if (r1 <= 0 || r2 <= 0) {\n    return \"\";\n  }\n\n  // If circles are within distance\n  if (d > maxDist) {\n    return \"\";\n  }\n\n  // If one circle is not within the bounds of the other\n  if (d <= Math.abs(r1 - r2)) {\n    return \"\";\n  }\n\n  // If circles are touching\n  if (d < r1 + r2) {\n    // Expands spread as circles get closer\n    // Hiroyuki Sato magic\n    u1 = Math.acos((r1 * r1 + d * d - r2 * r2) / (2 * r1 * d));\n    u2 = Math.acos((r2 * r2 + d * d - r1 * r1) / (2 * r2 * d));\n  }\n\n  // Angle between the vector connecting center1 & center2 and x-axis\n  // Used as a correcting offset for our radian-based calculations\n  const angleOffset = getDiffVectorAngle(center2, center1);\n\n  // Max angle of spread is used to find the tangents we use to make the trapazoid\n  // @see https://varun.ca/metaballs/#building-the-metaball\n  // @see http://www.mathopenref.com/consttangentsext.html\n  const maxSpread = Math.acos((r1 - r2) / d);\n\n  // Find the angles for trapazoid via unit cirlce math and Sato offsets\n  // Angles are measured clockwise\n  const angle1 = angleOffset + u1 + (maxSpread - u1) * v;\n  const angle2 = angleOffset - u1 - (maxSpread - u1) * v;\n  const angle3 = angleOffset + Math.PI - u2 - (Math.PI - u2 - maxSpread) * v;\n  const angle4 = angleOffset - Math.PI + u2 + (Math.PI - u2 - maxSpread) * v;\n\n  // Convert angles to cartesian points of trapazoid corners\n  const p1 = getVector(center1, angle1, r1);\n  const p2 = getVector(center1, angle2, r1);\n  const p3 = getVector(center2, angle3, r2);\n  const p4 = getVector(center2, angle4, r2);\n  const points = [p1, p2, p3, p4];\n\n  // Handle length = the distance between both ends of the curve\n  const totalRadius = r1 + r2;\n  // Take into account when balls are overlapping\n  const d2Base = Math.min(v * handleSize, getDist(p1, p3) / totalRadius);\n  const d2 = d2Base * Math.min(1, (d * 2) / (r1 + r2));\n\n  // Handle length\n  const hl1 = r1 * d2;\n  const hl2 = r2 * d2;\n\n  // Calculate handles\n  // Protrude 180* from respective point p with distance hl\n  const h1 = getVector(p1, angle1 - HALF_PI, hl1);\n  const h2 = getVector(p2, angle2 + HALF_PI, hl1);\n  const h3 = getVector(p3, angle3 + HALF_PI, hl2);\n  const h4 = getVector(p4, angle4 - HALF_PI, hl2);\n  const handles = [h1, h2, h3, h4];\n\n  return toGooPath(points, handles, d > r1, r2);\n};\n\nexport default makeMetaballGoo;\n","import React, { useState, useRef } from \"react\";\nimport { toSVGCoord } from \"./metaball/utils/dom\";\nimport { Point } from \"./metaball/types/Point\";\nimport makeGoo from \"./metaball/metaball\";\nimport { Spring, config } from \"react-spring/renderprops\";\n\nimport \"./App.css\";\n\nconst CIRCLE_1: Point = [400, 600];\nconst R1 = 70;\nconst R2 = 90;\n\nconst App: React.FC = () => {\n  const [circleCoord, setCircleCoord] = useState([0, 0]);\n  const gEl = useRef<SVGGElement>(null);\n  const svgEl = useRef<SVGSVGElement>(null);\n\n  const handleMouseMove = (event: React.MouseEvent) => {\n    if (!svgEl.current || !gEl.current) return;\n    setCircleCoord(toSVGCoord(event, svgEl.current, gEl.current));\n  };\n\n  const [x, y] = circleCoord;\n\n  return (\n    <svg\n      id=\"svg\"\n      className=\"w-100 h-100\"\n      viewBox=\"0 0 1200 1200\"\n      ref={svgEl}\n      onMouseMove={handleMouseMove}\n    >\n      <Spring\n        config={config.molasses}\n        from={{ coords: [400, 600] }}\n        to={{ coords: [x, y] }}\n      >\n        {(props: any) => (\n          <g ref={gEl} strokeWidth=\"6\" fill=\"#fff\" stroke=\"#333\">\n            <circle\n              id=\"circle1\"\n              cx={props.coords[0]}\n              cy={props.coords[1]}\n              r={R1}\n            />\n            <circle id=\"circle2\" cx={x} cy={y} r={R2} stroke=\"none\" />\n            <path id=\"goo\" d={makeGoo(R1, R2, props.coords, [x, y])} />\n          </g>\n        )}\n      </Spring>\n    </svg>\n  );\n};\n\nexport default App;\n","import { Point } from \"../types/Point\";\n\n/**\n * Translate a MouseEvent \"mousemove\" to a coordinate in SVG space\n * @param ev a MouseEvent \"mousemove\" event\n * @param svg the parent svg container\n * @param el the svg object we are translating (fixes bugs caused by e.g. transform=\"scale(2)\")\n * @see https://www.sitepoint.com/how-to-translate-from-dom-to-svg-coordinates-and-back-again/\n */\nconst toSVGCoord = (\n  ev: React.MouseEvent,\n  svg: SVGSVGElement,\n  el: SVGGElement\n): Point => {\n  if (!ev || !svg || !el) return [0, 0];\n  // Use parent container to create a point for calculating\n  const point = svg.createSVGPoint();\n  point.x = ev.clientX;\n  point.y = ev.clientY;\n  // Use target object's matrix so calculations are accurate\n  const elMatrix = (<DOMMatrix>el.getScreenCTM()).inverse();\n  const translated = point.matrixTransform(elMatrix);\n  return [translated.x, translated.y];\n};\n\nexport { toSVGCoord };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}